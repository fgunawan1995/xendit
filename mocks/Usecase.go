// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	model "github.com/fgunawan1995/xendit/model"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// GetAllCharacterIDs provides a mock function with given fields:
func (_m *Usecase) GetAllCharacterIDs() ([]int64, error) {
	ret := _m.Called()

	var r0 []int64
	if rf, ok := ret.Get(0).(func() []int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCharacterByID provides a mock function with given fields: id
func (_m *Usecase) GetCharacterByID(id int64) (model.Character, error) {
	ret := _m.Called(id)

	var r0 model.Character
	if rf, ok := ret.Get(0).(func(int64) model.Character); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(model.Character)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveCharacters provides a mock function with given fields:
func (_m *Usecase) SaveCharacters() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
